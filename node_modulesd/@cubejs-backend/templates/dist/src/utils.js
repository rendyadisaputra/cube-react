"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyFetch = exports.fileContentsRecursive = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const shared_1 = require("@cubejs-backend/shared");
async function fileContentsRecursive(dir, rootPath, includeNodeModules = false) {
    if (!rootPath) {
        rootPath = dir;
    }
    if (!fs_extra_1.default.pathExistsSync(dir)) {
        return [];
    }
    if ((dir.includes('node_modules') && !includeNodeModules) || dir.includes('.git')) {
        return [];
    }
    const files = fs_extra_1.default.readdirSync(dir);
    return (await Promise.all(files.map(async (file) => {
        const fileName = path_1.default.join(dir, file);
        const stats = await fs_extra_1.default.lstat(fileName);
        if (!stats.isDirectory()) {
            const content = fs_extra_1.default.readFileSync(fileName, 'utf-8');
            return [
                {
                    fileName: fileName.replace(rootPath, '').replace(/\\/g, '/'),
                    content,
                },
            ];
        }
        else {
            return fileContentsRecursive(fileName, rootPath, includeNodeModules);
        }
    }))).reduce((a, b) => a.concat(b), []);
}
exports.fileContentsRecursive = fileContentsRecursive;
async function proxyFetch(url) {
    return node_fetch_1.default(url, {
        agent: await shared_1.getHttpAgentForProxySettings(),
    });
}
exports.proxyFetch = proxyFetch;
//# sourceMappingURL=utils.js.map
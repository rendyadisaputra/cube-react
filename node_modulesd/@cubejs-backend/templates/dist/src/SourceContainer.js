"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceContainer = void 0;
const ramda_1 = require("ramda");
class SourceContainer {
    constructor(sourceFiles) {
        this.fileToTargetSource = {};
        this.importDependencies = {};
        this.filesToMove = {};
        this.fileContent = ramda_1.fromPairs(sourceFiles.map(({ fileName, content }) => [fileName, content]));
    }
    getTargetSource(fileName) {
        return this.fileToTargetSource[fileName];
    }
    addTargetSource(fileName, target) {
        this.fileToTargetSource[fileName] = target;
    }
    add(fileName, content) {
        this.fileContent[fileName] = content;
    }
    addImportDependencies(importDependencies = {}) {
        // if some template returns a dependency with a specified version
        // it should have a priority over the same dependency with the `latest` version
        const specificDependencies = ramda_1.fromPairs(Object.keys(importDependencies)
            .map((name) => {
            const version = this.importDependencies[name] && this.importDependencies[name] !== 'latest'
                ? this.importDependencies[name]
                : importDependencies[name];
            if (importDependencies[name]) {
                return [name, version];
            }
            return false;
        })
            .filter(Boolean));
        // todo: version validation
        this.importDependencies = {
            ...this.importDependencies,
            ...importDependencies,
            ...specificDependencies,
        };
    }
    addFileToMove(from, to) {
        this.filesToMove[from] = to;
    }
    outputSources() {
        return ramda_1.toPairs(this.fileContent).map(([fileName, content]) => ({
            fileName,
            content,
        }));
    }
}
exports.SourceContainer = SourceContainer;
//# sourceMappingURL=SourceContainer.js.map
/// <reference types="node" />
import { CreateOptions as CoreCreateOptions, CubejsServerCore, DatabaseType } from '@cubejs-backend/server-core';
import express from 'express';
import https from 'https';
import http from 'http';
import { CorsOptions } from 'cors';
import { WebSocketServer, WebSocketServerOptions } from './websocket-server';
export declare type InitAppFn = (app: express.Application) => void | Promise<void>;
interface HttpOptions {
    cors?: CorsOptions;
}
export interface CreateOptions extends CoreCreateOptions, WebSocketServerOptions {
    webSockets?: boolean;
    initApp?: InitAppFn;
    http?: HttpOptions;
}
declare type RequireOne<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: T[P];
};
export declare class CubejsServer {
    protected readonly core: CubejsServerCore;
    protected readonly config: RequireOne<CreateOptions, 'webSockets' | 'http'>;
    protected redirector: http.Server | null;
    protected server: http.Server | https.Server | null;
    protected socketServer: WebSocketServer | null;
    constructor(config?: CreateOptions);
    listen(options?: https.ServerOptions | http.ServerOptions): Promise<{
        app: import("express-serve-static-core").Express;
        port: number;
        tlsPort: number | undefined;
        server: http.Server | https.Server;
        version: any;
    }>;
    testConnections(): any;
    runScheduledRefresh(context: any, queryingOptions: any): any;
    close(): Promise<void>;
    static createDriver(dbType: DatabaseType): any;
    static driverDependencies(dbType: DatabaseType): any;
    static apiSecret(): string | undefined;
    static version(): any;
}
export {};
//# sourceMappingURL=server.d.ts.map
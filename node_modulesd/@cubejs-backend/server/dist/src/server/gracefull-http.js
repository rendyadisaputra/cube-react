"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gracefulHttp = void 0;
const https_1 = __importDefault(require("https"));
function gracefulHttp(server) {
    const reqsPerSocket = new Map();
    let stopped = false;
    let gracefully = true;
    function onConnection(socket) {
        reqsPerSocket.set(socket, 0);
        socket.once('close', () => reqsPerSocket.delete(socket));
    }
    function onRequest(req, res) {
        reqsPerSocket.set(req.socket, reqsPerSocket.get(req.socket) + 1);
        res.once('finish', () => {
            const pending = reqsPerSocket.get(req.socket) - 1;
            reqsPerSocket.set(req.socket, pending);
            if (stopped && pending === 0) {
                req.socket.end();
            }
        });
    }
    function destroyAll() {
        gracefully = false;
        // eslint-disable-next-line no-restricted-syntax
        for (const socket of reqsPerSocket.keys()) {
            socket.end();
        }
        // allow request handlers to update state
        setImmediate(() => {
            // eslint-disable-next-line no-restricted-syntax
            for (const socket of reqsPerSocket.keys()) {
                socket.destroy();
            }
        });
    }
    const stop = (timeout) => new Promise((resolve) => {
        // allow request handlers to update state
        setImmediate(() => {
            stopped = true;
            if (timeout) {
                setTimeout(destroyAll, timeout).unref();
            }
            else {
                destroyAll();
            }
            server.close(e => {
                resolve([gracefully, e]);
            });
            // eslint-disable-next-line no-restricted-syntax
            for (const [socket, req] of reqsPerSocket.entries()) {
                if (req === 0) {
                    socket.end();
                }
            }
        });
    });
    if (server instanceof https_1.default.Server) {
        server.on('secureConnection', onConnection);
    }
    else {
        server.on('connection', onConnection);
    }
    server.on('request', onRequest);
    server.stop = stop;
    return server;
}
exports.gracefulHttp = gracefulHttp;
//# sourceMappingURL=gracefull-http.js.map
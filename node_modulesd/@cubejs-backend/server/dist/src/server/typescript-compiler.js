"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypescriptCompiler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
const diagnostic_host_1 = require("./diagnostic-host");
class TypescriptCompiler {
    constructor() {
        this.options = {
            target: typescript_1.default.ScriptTarget.ES2017,
            module: typescript_1.default.ModuleKind.CommonJS,
            jsx: typescript_1.default.JsxEmit.None,
            lib: [
                'lib.es2017.full.d.ts',
            ],
            rootDir: '/cube',
            esModuleInterop: true,
            moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
        };
        this.compileConfiguration = () => {
            const files = [
                path_1.default.join(process.cwd(), 'cube.ts')
            ];
            // In-memory emit to protect override of cube.js when we compile cube.ts
            const createdFiles = {};
            const host = typescript_1.default.createCompilerHost(this.options);
            host.writeFile = (fileName, contents) => {
                createdFiles[path_1.default.basename(fileName)] = contents;
            };
            const program = typescript_1.default.createProgram(files, this.options, host);
            const diagnostics = typescript_1.default.getPreEmitDiagnostics(program);
            if (diagnostics.length) {
                const DiagnosticHostInstance = new diagnostic_host_1.DiagnosticHost();
                typescript_1.default.sys.write(typescript_1.default.formatDiagnosticsWithColorAndContext(diagnostics, DiagnosticHostInstance));
                typescript_1.default.sys.exit(typescript_1.default.ExitStatus.DiagnosticsPresent_OutputsSkipped);
            }
            const emitResult = program.emit();
            if (emitResult.emitSkipped) {
                console.log('Unable to compile configuration file.');
                process.exit(1);
            }
            return createdFiles['cube.js'];
        };
    }
}
exports.TypescriptCompiler = TypescriptCompiler;
//# sourceMappingURL=typescript-compiler.js.map
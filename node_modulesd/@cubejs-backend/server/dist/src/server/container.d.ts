import { SemVer } from 'semver';
import { PackageManifest } from '@cubejs-backend/shared';
import { ProjectLock } from './utils';
import { CreateOptions, CubejsServer } from '../server';
import type { TypescriptCompiler as TypescriptCompilerType } from './typescript-compiler';
export declare class ServerContainer {
    protected readonly configuration: {
        debug: boolean;
    };
    protected isCubeConfigEmpty: boolean;
    constructor(configuration: {
        debug: boolean;
    });
    protected getTypeScriptCompiler(): TypescriptCompilerType;
    protected compareBuiltInAndUserVersions(builtInVersion: SemVer, userVersion: SemVer): void;
    protected parseLock(): Promise<ProjectLock | null>;
    protected runProjectDockerDiagnostics(manifest: PackageManifest, lock: ProjectLock): Promise<void>;
    runProjectDiagnostics(): Promise<void>;
    runServerInstance(configuration: CreateOptions, embedded: boolean | undefined, isCubeConfigEmpty: boolean): Promise<CubejsServer>;
    lookupConfiguration(override?: boolean): Promise<CreateOptions>;
    protected loadConfigurationFromMemory(content: string): Promise<CreateOptions>;
    protected loadConfigurationFromFile(): Promise<CreateOptions>;
    /**
     * @param embedded Cube.js will start without https/ws/graceful shutdown + without timers
     */
    start(embedded?: boolean): Promise<void>;
}
//# sourceMappingURL=container.d.ts.map
/// <reference types="node" />
import { CreateOptions as CoreCreateOptions, CubejsServerCore, DatabaseType, DriverContext, SystemOptions } from '@cubejs-backend/server-core';
import express from 'express';
import http from 'http';
import { CorsOptions } from 'cors';
import type { SQLServer } from '@cubejs-backend/api-gateway';
import type { BaseDriver } from '@cubejs-backend/query-orchestrator';
import { WebSocketServer, WebSocketServerOptions } from './websocket-server';
import { GracefulHttpServer } from './server/gracefull-http';
import { ServerStatusHandler } from './server-status';
export declare type InitAppFn = (app: express.Application) => void | Promise<void>;
interface HttpOptions {
    cors?: CorsOptions;
}
export interface CreateOptions extends CoreCreateOptions, WebSocketServerOptions {
    webSockets?: boolean;
    sqlPort?: number | false;
    initApp?: InitAppFn;
    http?: HttpOptions;
    gracefulShutdown?: number;
}
declare type RequireOne<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: T[P];
};
export declare class CubejsServer {
    protected readonly core: CubejsServerCore;
    protected readonly config: RequireOne<CreateOptions, 'webSockets' | 'http' | 'sqlPort'>;
    protected server: GracefulHttpServer | null;
    protected socketServer: WebSocketServer | null;
    protected sqlServer: SQLServer | null;
    protected readonly status: ServerStatusHandler;
    constructor(config?: CreateOptions, systemOptions?: SystemOptions);
    listen(options?: http.ServerOptions): Promise<{
        app: import("express-serve-static-core").Express;
        port: any;
        server: GracefulHttpServer;
        version: any;
    }>;
    testConnections(): Promise<any[]>;
    handleScheduledRefreshInterval(options: any): Promise<{
        finished: boolean;
    }[]>;
    runScheduledRefresh(context: any, queryingOptions: any): Promise<{
        finished: boolean;
    }>;
    getDriver(ctx: DriverContext): Promise<BaseDriver>;
    close(): Promise<void>;
    static createDriver(dbType: DatabaseType): BaseDriver;
    static driverDependencies(dbType: DatabaseType): string;
    static apiSecret(): string | undefined;
    static version(): any;
    shutdown(signal: string, graceful?: boolean): Promise<0 | 1>;
}
export {};
//# sourceMappingURL=server.d.ts.map
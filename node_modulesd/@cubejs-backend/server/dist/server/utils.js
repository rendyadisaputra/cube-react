"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseYarnLock = exports.parseNpmLock = exports.getMajorityVersion = exports.isSimilarPackageRelease = exports.isDevPackage = exports.isCubePackage = exports.isCubeNotServerPackage = void 0;
const lockfile = __importStar(require("@yarnpkg/lockfile"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const shared_1 = require("@cubejs-backend/shared");
const devPackages = [
    'typescript',
];
function isCubeNotServerPackage(pkgName) {
    return pkgName !== '@cubejs-backend/server' && pkgName.toLowerCase().startsWith('@cubejs-backend/');
}
exports.isCubeNotServerPackage = isCubeNotServerPackage;
function isCubePackage(pkgName) {
    return pkgName.toLowerCase().startsWith('@cubejs-backend/');
}
exports.isCubePackage = isCubePackage;
function isDevPackage(pkgName) {
    return isCubePackage(pkgName) || devPackages.includes(pkgName.toLowerCase());
}
exports.isDevPackage = isDevPackage;
function isSimilarPackageRelease(pkg, core) {
    if (pkg.major === 0 && core.major === 0) {
        return pkg.minor === core.minor;
    }
    return pkg.major === core.major;
}
exports.isSimilarPackageRelease = isSimilarPackageRelease;
function getMajorityVersion(pkg, strict = false) {
    if (pkg.major === 0) {
        if (strict) {
            return `^${pkg.major}.${pkg.minor}.${pkg.patch}`;
        }
        return `^${pkg.major}.${pkg.minor}`;
    }
    if (strict) {
        return `^${pkg.major}.${pkg.minor}`;
    }
    return `^${pkg.major}`;
}
exports.getMajorityVersion = getMajorityVersion;
function parseNpmLock() {
    const file = fs.readFileSync(path.join(process.cwd(), 'package-lock.json'), 'utf8');
    try {
        const lock = JSON.parse(file);
        if (!lock) {
            return null;
        }
        if (!lock.dependencies) {
            return null;
        }
        return {
            resolveVersion: (pkg) => {
                if (pkg in lock.dependencies) {
                    return lock.dependencies[pkg].version;
                }
                return null;
            },
        };
    }
    catch (e) {
        shared_1.internalExceptions(e);
        return null;
    }
}
exports.parseNpmLock = parseNpmLock;
function parseYarnLock() {
    const file = fs.readFileSync(path.join(process.cwd(), 'yarn.lock'), 'utf8');
    const { type, object } = lockfile.parse(file);
    if (type === 'success') {
        return {
            resolveVersion: (pkg) => {
                if (pkg in object) {
                    return object[pkg].version;
                }
                return null;
            },
        };
    }
    return null;
}
exports.parseYarnLock = parseYarnLock;
//# sourceMappingURL=utils.js.map
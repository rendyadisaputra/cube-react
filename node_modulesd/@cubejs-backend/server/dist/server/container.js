"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerContainer = void 0;
const shared_1 = require("@cubejs-backend/shared");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const color_1 = __importDefault(require("@oclif/color"));
const semver_1 = require("semver");
const utils_1 = require("./utils");
const server_1 = require("../server");
function safetyParseSemver(version) {
    if (version) {
        return semver_1.parse(version);
    }
    return null;
}
class ServerContainer {
    constructor(configuration) {
        this.configuration = configuration;
    }
    getTypeScriptCompiler() {
        if (shared_1.packageExists('typescript', shared_1.isDockerImage())) {
            // eslint-disable-next-line global-require
            const { TypescriptCompiler } = require('./typescript-compiler');
            return new TypescriptCompiler();
        }
        throw new Error('Typescript dependency not found. Please run this command from project directory.');
    }
    compareBuiltInAndUserVersions(builtInVersion, userVersion) {
        const compareResult = semver_1.compare(builtInVersion, userVersion);
        if (this.configuration.debug) {
            console.log('[runProjectDockerDiagnostics] compare', {
                builtIn: builtInVersion.raw,
                user: userVersion.raw,
                compare: compareResult,
            });
        }
        if (compareResult === -1) {
            console.log(`${color_1.default.yellow('warning')} You are using old Docker image (${utils_1.getMajorityVersion(builtInVersion, true)}) `
                + `with new packages (${utils_1.getMajorityVersion(userVersion, true)})`);
        }
        if (compareResult === 1) {
            console.log(`${color_1.default.yellow('warning')} You are using old Cube.js packages (${utils_1.getMajorityVersion(userVersion, true)}) `
                + `with new Docker image (${utils_1.getMajorityVersion(builtInVersion, true)})`);
        }
    }
    async parseLock() {
        const hasNpm = fs_1.default.existsSync(path_1.default.join(process.cwd(), 'package-lock.json'));
        const hasYarn = fs_1.default.existsSync(path_1.default.join(process.cwd(), 'yarn.lock'));
        if (this.configuration.debug) {
            console.log('[parseLock] do', {
                hasNpm,
                hasYarn
            });
        }
        if (hasNpm && hasYarn) {
            console.log(`${color_1.default.yellow('warning')} You are using two different lock files, both for npm/yarn. Please use only one.`);
            return null;
        }
        if (hasNpm) {
            return utils_1.parseNpmLock();
        }
        if (hasYarn) {
            return utils_1.parseYarnLock();
        }
        // @todo Error or notice?
        return null;
    }
    async runProjectDockerDiagnostics(manifest, lock) {
        if (this.configuration.debug) {
            console.log('[runProjectDockerDiagnostics] do');
        }
        const builtInCoreVersion = safetyParseSemver(await shared_1.resolveBuiltInPackageVersion('@cubejs-backend/server'));
        if (!builtInCoreVersion) {
            return;
        }
        const userCoreVersion = safetyParseSemver(lock.resolveVersion('@cubejs-backend/server'));
        if (userCoreVersion) {
            this.compareBuiltInAndUserVersions(builtInCoreVersion, userCoreVersion);
            return;
        }
        /**
         * It's needed to detect case when user didnt install @cubejs-backend/server, but
         * install @cubejs-backend/postgres-driver and it doesn't fit to built-in server
         */
        const depsToCompareVersions = Object.keys(manifest.devDependencies).filter(utils_1.isCubeNotServerPackage);
        // eslint-disable-next-line no-restricted-syntax
        for (const pkgName of depsToCompareVersions) {
            const pkgVersion = safetyParseSemver(lock.resolveVersion(pkgName));
            if (pkgVersion) {
                this.compareBuiltInAndUserVersions(builtInCoreVersion, pkgVersion);
                return;
            }
        }
    }
    async runProjectDiagnostics() {
        if (!fs_1.default.existsSync(path_1.default.join(process.cwd(), 'package.json'))) {
            if (this.configuration.debug) {
                console.log('[runProjectDiagnostics] Unable to find package.json, configuration diagnostics skipped');
            }
            return;
        }
        // eslint-disable-next-line global-require,import/no-dynamic-require
        const manifest = require(path_1.default.join(process.cwd(), 'package.json'));
        if (!manifest) {
            return;
        }
        if (manifest.dependencies) {
            // eslint-disable-next-line no-restricted-syntax
            for (const [pkgName] of Object.entries(manifest.dependencies)) {
                if (utils_1.isDevPackage(pkgName)) {
                    throw new Error(`"${pkgName}" package must be installed in devDependencies`);
                }
            }
        }
        if (manifest.devDependencies) {
            // eslint-disable-next-line no-restricted-syntax
            for (const pkgName of Object.keys(manifest.devDependencies)) {
                if (!utils_1.isDevPackage(pkgName)) {
                    console.log(`${color_1.default.yellow('warning')} "${pkgName}" will not be installed in Cube Cloud (please move it to dependencies)`);
                }
            }
        }
        const lock = await this.parseLock();
        if (!lock) {
            return;
        }
        if (manifest.devDependencies) {
            const coreVersion = safetyParseSemver(lock.resolveVersion('@cubejs-backend/server'));
            if (coreVersion) {
                const depsToCompareVersions = Object.keys(manifest.devDependencies).filter(utils_1.isCubeNotServerPackage);
                // eslint-disable-next-line no-restricted-syntax
                for (const pkgName of depsToCompareVersions) {
                    const pkgVersion = safetyParseSemver(lock.resolveVersion(pkgName));
                    if (pkgVersion && !utils_1.isSimilarPackageRelease(pkgVersion, coreVersion)) {
                        console.log(`${color_1.default.yellow('error')} "${pkgName}" (${utils_1.getMajorityVersion(pkgVersion)}) `
                            + `is using another release then @cubejs-backend/server (${utils_1.getMajorityVersion(coreVersion)}).`);
                    }
                }
            }
        }
        if (shared_1.isDockerImage()) {
            await this.runProjectDockerDiagnostics(manifest, lock);
        }
        else if (this.configuration.debug) {
            console.log('[runProjectDockerDiagnostics] skipped');
        }
    }
    async runServerInstance(configuration) {
        const server = new server_1.CubejsServer(configuration);
        try {
            const { version, port } = await server.listen();
            console.log(`ðŸš€ Cube.js server (${version}) is listening on ${port}`);
        }
        catch (e) {
            console.error('Fatal error during server start: ');
            console.error(e.stack || e);
        }
    }
    async lookupConfiguration() {
        if (fs_1.default.existsSync(path_1.default.join(process.cwd(), 'cube.ts'))) {
            this.getTypeScriptCompiler().compileConfiguration();
        }
        if (fs_1.default.existsSync(path_1.default.join(process.cwd(), 'cube.js'))) {
            return this.loadConfiguration();
        }
        console.log(`${color_1.default.yellow('warning')} There is no cube.js file. Continue with environment variables`);
        return {};
    }
    async loadConfiguration() {
        const file = await Promise.resolve().then(() => __importStar(require(path_1.default.join(process.cwd(), 'cube.js'))));
        if (this.configuration.debug) {
            console.log('Loaded configuration file', file);
        }
        if (file.default) {
            return file.default;
        }
        throw new Error('Configure file must export configuration as default.');
    }
}
exports.ServerContainer = ServerContainer;
//# sourceMappingURL=container.js.map
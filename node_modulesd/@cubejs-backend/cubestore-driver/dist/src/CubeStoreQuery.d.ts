import { BaseFilter, BaseQuery, BaseMeasure } from '@cubejs-backend/schema-compiler';
declare class CubeStoreFilter extends BaseFilter {
    likeIgnoreCase(column: any, not: any, param: any): string;
}
declare type RollingWindow = {
    trailing?: string | 'unbounded';
    leading?: string | 'unbounded';
    offset?: 'start' | 'end';
};
export declare class CubeStoreQuery extends BaseQuery {
    newFilter(filter: any): CubeStoreFilter;
    convertTz(field: any): string;
    timeStampParam(): string;
    timeStampCast(value: any): string;
    timestampFormat(): string;
    dateTimeCast(value: any): string;
    subtractInterval(date: any, interval: any): string;
    addInterval(date: any, interval: any): string;
    timeGroupedColumn(granularity: any, dimension: any): string;
    escapeColumnName(name: any): string;
    seriesSql(timeDimension: any): any;
    concatStringsSql(strings: any): string;
    unixTimestampSql(): string;
    wrapSegmentForDimensionSelect(sql: any): string;
    hllMerge(sql: any): string;
    hllCardinalityMerge(sql: any): string;
    hllCardinality(sql: any): string;
    countDistinctApprox(sql: any): string;
    regularAndTimeSeriesRollupQuery(regularMeasures: BaseMeasure[], multipliedMeasures: BaseMeasure[], cumulativeMeasures: Array<[boolean, BaseMeasure]>, preAggregationForQuery: any): any;
    overTimeSeriesSelectRollup(cumulativeMeasures: any, otherMeasures: any, baseQuery: any, baseQueryAlias: any, timeDimension: any, preAggregationForQuery: any): string;
    toInterval(interval: any): string;
    maxRollingWindow(a: RollingWindow, b: RollingWindow): RollingWindow;
    overTimeSeriesForSelectRollup(cumulativeMeasures: any, otherMeasures: any, timeDimension: any, preAggregationForQuery: any): any;
}
export {};
//# sourceMappingURL=CubeStoreQuery.d.ts.map
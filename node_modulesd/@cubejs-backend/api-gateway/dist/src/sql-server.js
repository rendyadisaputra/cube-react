"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLServer = void 0;
const uuid_1 = require("uuid");
const native_1 = require("@cubejs-backend/native");
class SQLServer {
    constructor(apiGateway) {
        this.apiGateway = apiGateway;
        native_1.setLogLevel(process.env.CUBEJS_LOG_LEVEL === 'trace' ? 'trace' : 'warn');
    }
    async init(options) {
        return native_1.registerInterface({
            port: options.sqlPort,
            checkAuth: async (payload) => {
                try {
                    await this.apiGateway.checkAuthFn({}, payload.authorization);
                    return true;
                }
                catch (e) {
                    return false;
                }
            },
            meta: async (payload) => {
                const authContext = await this.apiGateway.checkAuthFn({}, payload.authorization);
                const requestId = `${uuid_1.v4()}-span-1`;
                const context = await this.apiGateway.contextByReq({}, authContext, requestId);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.meta({
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            load: async (payload) => {
                const authContext = await this.apiGateway.checkAuthFn({}, payload.authorization);
                const requestId = payload.request_id || `${uuid_1.v4()}-span-1`;
                const context = await this.apiGateway.contextByReq({}, authContext, requestId);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.load({
                            query: payload.query,
                            queryType: 'multi',
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
        });
    }
    async close() {
        // @todo Implement
    }
}
exports.SQLServer = SQLServer;
//# sourceMappingURL=sql-server.js.map
export class BaseMeasure {
    static isCumulative(definition: any): boolean;
    constructor(query: any, measure: any);
    query: any;
    expression: any;
    expressionCubeName: any;
    expressionName: string | undefined;
    measure: any;
    getMembers(): BaseMeasure[];
    selectColumns(): string[];
    cumulativeSelectColumns(): string[];
    cumulativeMeasureSql(): any;
    measureSql(): any;
    cube(): any;
    measureDefinition(): any;
    definition(): any;
    aliasName(): any;
    unescapedAliasName(): any;
    isCumulative(): boolean;
    isAdditive(): boolean;
    rollingWindowDefinition(): any;
    dateJoinCondition(): any;
    windowGranularity(): any;
    minGranularity(granularityA: any, granularityB: any): any;
    granularityFromInterval(interval: any): "day" | "week" | "year" | "month" | "hour" | undefined;
    shouldUngroupForCumulative(): any;
    sqlDefinition(): any;
    path(): any;
}
//# sourceMappingURL=BaseMeasure.d.ts.map
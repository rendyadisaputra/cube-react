export class BaseFilter extends BaseDimension {
    constructor(query: any, filter: any);
    measure: any;
    operator: any;
    values: any;
    camelizeOperator: string;
    filterToWhere(): any;
    measureFilterToWhere(): any;
    conditionSql(columnSql: any): any;
    measureDefinition(): any;
    escapeWildcardChars(param: any): any;
    isWildcardOperator(): boolean;
    filterParams(): any[];
    isDateOperator(): boolean;
    valuesArray(): any[];
    valuesContainNull(): boolean;
    castParameter(): string;
    firstParameter(): any;
    allocateCastParam(param: any): any;
    allocateTimestampParam(param: any): any;
    allocateTimestampParams(): any[];
    allParamsRepeat(basePart: any): any[];
    isArrayValues(): boolean;
    containsWhere(column: any): string;
    notContainsWhere(column: any): string;
    likeOr(column: any, not: any): string;
    orIsNullCheck(column: any, not: any): string;
    shouldAddOrIsNull(not: any): boolean;
    likeIgnoreCase(column: any, not: any, param: any): string;
    allocateParam(param: any): any;
    equalsWhere(column: any): string;
    inPlaceholders(): string;
    inWhere(column: any): string;
    notEqualsWhere(column: any): string;
    notInWhere(column: any): string;
    setWhere(column: any): string;
    notSetWhere(column: any): string;
    gtWhere(column: any): string;
    gteWhere(column: any): string;
    ltWhere(column: any): string;
    lteWhere(column: any): string;
    expressionEqualsWhere(column: any): string;
    inDateRangeWhere(column: any): any;
    notInDateRangeWhere(column: any): any;
    onTheDateWhere(column: any): any;
    beforeDateWhere(column: any): any;
    afterDateWhere(column: any): any;
    formatFromDate(date: any): any;
    inDbTimeZoneDateFrom(date: any): any;
    formatToDate(date: any): any;
    inDbTimeZoneDateTo(date: any): any;
    formattedDateRange(): any[];
}
import { BaseDimension } from "./BaseDimension";
//# sourceMappingURL=BaseFilter.d.ts.map
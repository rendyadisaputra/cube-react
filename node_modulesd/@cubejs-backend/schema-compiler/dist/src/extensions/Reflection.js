"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reflection = void 0;
const ramda_1 = __importDefault(require("ramda"));
const DynamicReference_1 = require("../compiler/DynamicReference");
const extension_abstract_1 = require("./extension.abstract");
class Reflection extends extension_abstract_1.AbstractExtension {
    constructor() {
        super(...arguments);
        this.dynRef = (...args) => {
            if (args.length < 2) {
                throw new Error('List of references and a function are expected in form: dynRef(\'ref\', (r) => (...))');
            }
            const references = ramda_1.default.dropLast(1, args);
            const fn = args[args.length - 1];
            if (typeof fn !== 'function') {
                throw new Error('Last argument should be a function');
            }
            return new DynamicReference_1.DynamicReference(references, fn);
        };
    }
}
exports.Reflection = Reflection;
//# sourceMappingURL=Reflection.js.map
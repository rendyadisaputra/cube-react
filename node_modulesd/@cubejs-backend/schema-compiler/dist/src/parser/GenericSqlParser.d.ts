import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { GenericSqlListener } from "./GenericSqlListener";
import { GenericSqlVisitor } from "./GenericSqlVisitor";
export declare class GenericSqlParser extends Parser {
    static readonly T__0 = 1;
    static readonly T__1 = 2;
    static readonly T__2 = 3;
    static readonly T__3 = 4;
    static readonly SELECT = 5;
    static readonly ASTERISK = 6;
    static readonly FROM = 7;
    static readonly WHERE = 8;
    static readonly AND = 9;
    static readonly OR = 10;
    static readonly NOT = 11;
    static readonly AS = 12;
    static readonly LT = 13;
    static readonly LTE = 14;
    static readonly GT = 15;
    static readonly GTE = 16;
    static readonly EQUALS = 17;
    static readonly NOT_EQUALS = 18;
    static readonly IS = 19;
    static readonly NULL = 20;
    static readonly CAST = 21;
    static readonly INDEXED_PARAM = 22;
    static readonly ID = 23;
    static readonly DIGIT = 24;
    static readonly QUOTED_ID = 25;
    static readonly STRING = 26;
    static readonly WHITESPACE = 27;
    static readonly RULE_statement = 0;
    static readonly RULE_query = 1;
    static readonly RULE_fromTables = 2;
    static readonly RULE_selectFields = 3;
    static readonly RULE_field = 4;
    static readonly RULE_aliasField = 5;
    static readonly RULE_boolExp = 6;
    static readonly RULE_exp = 7;
    static readonly RULE_numeric = 8;
    static readonly RULE_binaryOperator = 9;
    static readonly RULE_unaryOperator = 10;
    static readonly RULE_idPath = 11;
    static readonly RULE_identifier = 12;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    statement(): StatementContext;
    query(): QueryContext;
    fromTables(): FromTablesContext;
    selectFields(): SelectFieldsContext;
    field(): FieldContext;
    aliasField(): AliasFieldContext;
    boolExp(): BoolExpContext;
    boolExp(_p: number): BoolExpContext;
    exp(): ExpContext;
    exp(_p: number): ExpContext;
    numeric(): NumericContext;
    binaryOperator(): BinaryOperatorContext;
    unaryOperator(): UnaryOperatorContext;
    idPath(): IdPathContext;
    identifier(): IdentifierContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private boolExp_sempred;
    private exp_sempred;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class StatementContext extends ParserRuleContext {
    query(): QueryContext;
    EOF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class QueryContext extends ParserRuleContext {
    _from: FromTablesContext;
    _where: BoolExpContext;
    SELECT(): TerminalNode;
    selectFields(): SelectFieldsContext;
    FROM(): TerminalNode;
    fromTables(): FromTablesContext;
    WHERE(): TerminalNode | undefined;
    boolExp(): BoolExpContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class FromTablesContext extends ParserRuleContext {
    aliasField(): AliasFieldContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class SelectFieldsContext extends ParserRuleContext {
    field(): FieldContext[];
    field(i: number): FieldContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class FieldContext extends ParserRuleContext {
    aliasField(): AliasFieldContext | undefined;
    ASTERISK(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class AliasFieldContext extends ParserRuleContext {
    idPath(): IdPathContext;
    identifier(): IdentifierContext | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class BoolExpContext extends ParserRuleContext {
    exp(): ExpContext | undefined;
    boolExp(): BoolExpContext[];
    boolExp(i: number): BoolExpContext;
    AND(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class ExpContext extends ParserRuleContext {
    exp(): ExpContext[];
    exp(i: number): ExpContext;
    binaryOperator(): BinaryOperatorContext | undefined;
    unaryOperator(): UnaryOperatorContext | undefined;
    idPath(): IdPathContext | undefined;
    identifier(): IdentifierContext | undefined;
    CAST(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    numeric(): NumericContext | undefined;
    INDEXED_PARAM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class NumericContext extends ParserRuleContext {
    DIGIT(): TerminalNode[];
    DIGIT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class BinaryOperatorContext extends ParserRuleContext {
    LT(): TerminalNode | undefined;
    LTE(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    GTE(): TerminalNode | undefined;
    EQUALS(): TerminalNode | undefined;
    NOT_EQUALS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class UnaryOperatorContext extends ParserRuleContext {
    IS(): TerminalNode;
    NULL(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class IdPathContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
export declare class IdentifierContext extends ParserRuleContext {
    ID(): TerminalNode | undefined;
    QUOTED_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: GenericSqlListener): void;
    exitRule(listener: GenericSqlListener): void;
    accept<Result>(visitor: GenericSqlVisitor<Result>): Result;
}
//# sourceMappingURL=GenericSqlParser.d.ts.map
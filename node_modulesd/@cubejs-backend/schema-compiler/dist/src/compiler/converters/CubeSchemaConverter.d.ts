import * as t from '@babel/types';
export declare type AstSet = {
    fileName: string;
    ast: t.File;
    cubeDefinition: t.ObjectExpression;
};
export declare type AstByCubeName = Record<string, AstSet>;
export interface CubeConverterInterface {
    convert(astByCubeName: AstByCubeName): void;
}
declare type SchemaFile = {
    fileName: string;
    content: string;
};
export declare class CubeSchemaConverter {
    protected fileRepository: any;
    protected converters: CubeConverterInterface[];
    protected dataSchemaFiles: SchemaFile[];
    protected parsedFiles: AstByCubeName;
    constructor(fileRepository: any, converters: CubeConverterInterface[]);
    protected prepare(): Promise<void>;
    protected parse(file: SchemaFile): import("@babel/parser").ParseResult<t.File>;
    generate(): Promise<void>;
    getSourceFiles(): {
        cubeName: string;
        fileName: string;
        source: string;
    }[];
}
export {};
//# sourceMappingURL=CubeSchemaConverter.d.ts.map
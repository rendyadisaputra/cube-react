"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubeSchemaConverter = void 0;
const generator_1 = __importDefault(require("@babel/generator"));
const parser_1 = require("@babel/parser");
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
class CubeSchemaConverter {
    constructor(fileRepository, converters) {
        this.fileRepository = fileRepository;
        this.converters = converters;
        this.dataSchemaFiles = [];
        this.parsedFiles = {};
    }
    async prepare() {
        this.dataSchemaFiles = await this.fileRepository.dataSchemaFiles();
        this.dataSchemaFiles.forEach((schemaFile) => {
            const ast = this.parse(schemaFile);
            traverse_1.default(ast, {
                CallExpression: (path) => {
                    var _a, _b, _c, _d, _e;
                    if (t.isIdentifier(path.node.callee)) {
                        const args = path.get('arguments');
                        if (path.node.callee.name === 'cube') {
                            if (args === null || args === void 0 ? void 0 : args[args.length - 1]) {
                                let cubeName;
                                if (args[0].node.type === 'StringLiteral' && args[0].node.value) {
                                    cubeName = args[0].node.value;
                                }
                                else if (args[0].node.type === 'TemplateLiteral' && ((_b = (_a = args[0].node.quasis) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value.cooked)) {
                                    cubeName = (_d = (_c = args[0].node.quasis) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.value.cooked;
                                }
                                if (cubeName == null) {
                                    throw new Error(`Error parsing ${schemaFile.fileName}`);
                                }
                                if (t.isObjectExpression((_e = args[1]) === null || _e === void 0 ? void 0 : _e.node) && ast != null) {
                                    this.parsedFiles[cubeName] = {
                                        fileName: schemaFile.fileName,
                                        ast,
                                        cubeDefinition: args[1].node,
                                    };
                                }
                            }
                        }
                    }
                },
            });
        });
    }
    parse(file) {
        try {
            return parser_1.parse(file.content, {
                sourceFilename: file.fileName,
                sourceType: 'module',
                plugins: ['objectRestSpread'],
            });
        }
        catch (error) {
            if (error.toString().indexOf('SyntaxError') !== -1) {
                const line = file.content.split('\n')[error.loc.line - 1];
                const spaces = Array(error.loc.column).fill(' ').join('');
                throw new Error(`Syntax error during '${file.fileName}' parsing: ${error.message}:\n${line}\n${spaces}^`);
            }
            throw error;
        }
    }
    async generate() {
        await this.prepare();
        this.converters.forEach((converter) => {
            converter.convert(this.parsedFiles);
        });
    }
    getSourceFiles() {
        return Object.entries(this.parsedFiles).map(([cubeName, file]) => ({
            cubeName,
            fileName: file.fileName,
            source: generator_1.default(file.ast, {}).code,
        }));
    }
}
exports.CubeSchemaConverter = CubeSchemaConverter;
//# sourceMappingURL=CubeSchemaConverter.js.map
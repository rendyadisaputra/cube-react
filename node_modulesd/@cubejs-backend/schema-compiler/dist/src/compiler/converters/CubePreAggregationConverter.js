"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubePreAggregationConverter = void 0;
const parser_1 = require("@babel/parser");
const t = __importStar(require("@babel/types"));
const UserError_1 = require("../UserError");
class CubePreAggregationConverter {
    constructor(preAggregationDefinition) {
        this.preAggregationDefinition = preAggregationDefinition;
    }
    convert(astByCubeName) {
        const { cubeName, preAggregationName, code } = this.preAggregationDefinition;
        const { cubeDefinition } = astByCubeName[cubeName];
        let preAggregationNode = null;
        const preAggregationAst = parser_1.parse(`(${code})`);
        if (t.isExpressionStatement(preAggregationAst.program.body[0])) {
            const [statement] = preAggregationAst.program.body;
            if (t.isObjectExpression(statement.expression)) {
                preAggregationNode = statement.expression;
            }
        }
        if (preAggregationNode === null) {
            throw new Error('Pre-aggregation definition is malformed');
        }
        let anchor = null;
        cubeDefinition.properties.forEach((prop) => {
            if (t.isObjectProperty(prop) && t.isIdentifier(prop.key)) {
                if (prop.key.name === 'preAggregations' && t.isObjectExpression(prop.value)) {
                    anchor = prop.value;
                    prop.value.properties.forEach((p) => {
                        if (t.isObjectProperty(p) && t.isIdentifier(p.key)) {
                            if (p.key.name === preAggregationName) {
                                throw new UserError_1.UserError(`Pre-aggregation '${preAggregationName}' is already defined`);
                            }
                        }
                    });
                }
            }
        });
        if (anchor === null) {
            cubeDefinition.properties.push(t.objectProperty(t.identifier('preAggregations'), t.objectExpression([t.objectProperty(t.identifier(preAggregationName), preAggregationNode)])));
        }
        else {
            anchor.properties.push(t.objectProperty(t.identifier(preAggregationName), preAggregationNode));
        }
    }
}
exports.CubePreAggregationConverter = CubePreAggregationConverter;
//# sourceMappingURL=CubePreAggregationConverter.js.map
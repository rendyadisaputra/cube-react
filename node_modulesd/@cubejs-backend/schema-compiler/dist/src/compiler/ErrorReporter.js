"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorReporter = void 0;
const code_frame_1 = require("@babel/code-frame");
const UserError_1 = require("./UserError");
const CompileError_1 = require("./CompileError");
class ErrorReporter {
    constructor(parent = null, context = [], options = {
        logger: (msg) => console.log(msg),
    }) {
        this.parent = parent;
        this.context = context;
        this.options = options;
        this.warnings = [];
        this.errors = [];
        this.file = null;
    }
    exitFile() {
        this.file = null;
    }
    inFile(file) {
        this.file = file;
    }
    warning(e) {
        if (this.file && e.loc) {
            const codeFrame = code_frame_1.codeFrameColumns(this.file.content, e.loc, {
                message: e.message,
                highlightCode: true,
            });
            const message = `Warning: ${e.message} in ${this.file.fileName}\n${codeFrame}`;
            if (this.rootReporter().warnings.find(m => (m.message || m) === message)) {
                return;
            }
            this.rootReporter().warnings.push({
                message,
                loc: e.loc,
            });
            this.options.logger(message);
        }
        else {
            if (this.rootReporter().warnings.find(m => (m.message || m) === e.message)) {
                return;
            }
            this.rootReporter().warnings.push(e);
            this.options.logger(e.message);
        }
    }
    syntaxError(e) {
        if (this.file && e.loc) {
            const codeFrame = code_frame_1.codeFrameColumns(this.file.content, e.loc, {
                message: e.message,
                highlightCode: true,
            });
            const message = `Syntax Error: ${e.message} in ${this.file.fileName}\n${codeFrame}`;
            if (this.rootReporter().errors.find(m => (m.message || m) === message)) {
                return;
            }
            this.rootReporter().errors.push({
                message,
            });
        }
        else {
            if (this.rootReporter().errors.find(m => (m.message || m) === e.message)) {
                return;
            }
            this.rootReporter().errors.push(e);
        }
    }
    error(e, fileName, lineNumber, position) {
        const message = `${this.context.length ? `${this.context.join(' -> ')}: ` : ''}${e instanceof UserError_1.UserError ? e.message : (e.stack || e)}`;
        if (this.rootReporter().errors.find(m => (m.message || m) === message)) {
            return;
        }
        if (fileName) {
            this.rootReporter().errors.push({
                message, fileName, lineNumber, position
            });
        }
        else {
            this.rootReporter().errors.push({
                message,
            });
        }
    }
    inContext(context) {
        return new ErrorReporter(this, this.context.concat(context));
    }
    throwIfAny() {
        if (this.rootReporter().errors.length) {
            throw new CompileError_1.CompileError(this.rootReporter().errors.map((e) => e.message).join('\n'));
        }
    }
    rootReporter() {
        return this.parent ? this.parent.rootReporter() : this;
    }
}
exports.ErrorReporter = ErrorReporter;
//# sourceMappingURL=ErrorReporter.js.map
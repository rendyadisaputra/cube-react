"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubeToMetaTransformer = void 0;
const inflection_1 = __importDefault(require("inflection"));
const ramda_1 = __importDefault(require("ramda"));
const camelcase_1 = __importDefault(require("camelcase"));
const UserError_1 = require("./UserError");
const adapter_1 = require("../adapter");
class CubeToMetaTransformer {
    constructor(cubeValidator, cubeEvaluator, contextEvaluator, joinGraph) {
        this.cubeValidator = cubeValidator;
        this.cubeSymbols = cubeEvaluator;
        this.cubeEvaluator = cubeEvaluator;
        this.contextEvaluator = contextEvaluator;
        this.joinGraph = joinGraph;
    }
    compile(cubes, errorReporter) {
        // eslint-disable-next-line no-multi-assign
        this.cubes = this.queries = this.cubeSymbols.cubeList
            .filter(this.cubeValidator.isCubeValid.bind(this.cubeValidator))
            .map((v) => this.transform(v, errorReporter.inContext(`${v.name} cube`)))
            .filter(Boolean);
    }
    transform(cube) {
        const cubeTitle = cube.title || this.titleize(cube.name);
        return {
            config: {
                name: cube.name,
                title: cubeTitle,
                description: cube.description,
                connectedComponent: this.joinGraph.connectedComponents()[cube.name],
                measures: ramda_1.default.compose(ramda_1.default.map((nameToMetric) => ({
                    ...this.measureConfig(cube.name, cubeTitle, nameToMetric),
                    isVisible: this.isVisible(nameToMetric[1], true)
                })), ramda_1.default.toPairs)(cube.measures || {}),
                dimensions: ramda_1.default.compose(ramda_1.default.map((nameToDimension) => ({
                    name: `${cube.name}.${nameToDimension[0]}`,
                    title: this.title(cubeTitle, nameToDimension),
                    type: nameToDimension[1].type,
                    description: nameToDimension[1].description,
                    shortTitle: this.title(cubeTitle, nameToDimension, true),
                    suggestFilterValues: nameToDimension[1].suggestFilterValues == null ? true : nameToDimension[1].suggestFilterValues,
                    format: nameToDimension[1].format,
                    meta: nameToDimension[1].meta,
                    isVisible: this.isVisible(nameToDimension[1], !nameToDimension[1].primaryKey)
                })), ramda_1.default.toPairs)(cube.dimensions || {}),
                segments: ramda_1.default.compose(ramda_1.default.map((nameToSegment) => ({
                    name: `${cube.name}.${nameToSegment[0]}`,
                    title: this.title(cubeTitle, nameToSegment),
                    shortTitle: this.title(cubeTitle, nameToSegment, true),
                    description: nameToSegment[1].description,
                    meta: nameToSegment[1].meta,
                    isVisible: this.isVisible(nameToSegment[1], true)
                })), ramda_1.default.toPairs)(cube.segments || {})
            }
        };
    }
    queriesForContext(contextId) {
        // return All queries if no context pass
        if (ramda_1.default.isNil(contextId) || ramda_1.default.isEmpty(contextId)) {
            return this.queries;
        }
        const context = this.contextEvaluator.contextDefinitions[contextId];
        // If contextId is wrong
        if (ramda_1.default.isNil(context)) {
            throw new UserError_1.UserError(`Context ${contextId} doesn't exist`);
        }
        // As for now context works on the cubes level
        return ramda_1.default.filter((query) => ramda_1.default.contains(query.config.name, context.contextMembers))(this.queries);
    }
    isVisible(symbol, defaultValue) {
        if (symbol.visible != null) {
            return symbol.visible;
        }
        if (symbol.shown != null) {
            return symbol.shown;
        }
        return defaultValue;
    }
    measureConfig(cubeName, cubeTitle, nameToMetric) {
        const name = `${cubeName}.${nameToMetric[0]}`;
        // Support both old 'drillMemberReferences' and new 'drillMembers' keys
        const drillMembers = nameToMetric[1].drillMembers || nameToMetric[1].drillMemberReferences;
        const drillMembersArray = (drillMembers && this.cubeEvaluator.evaluateReferences(cubeName, drillMembers, { originalSorting: true })) || [];
        return {
            name,
            title: this.title(cubeTitle, nameToMetric),
            description: nameToMetric[1].description,
            shortTitle: this.title(cubeTitle, nameToMetric, true),
            format: nameToMetric[1].format,
            cumulativeTotal: nameToMetric[1].cumulative || adapter_1.BaseMeasure.isCumulative(nameToMetric[1]),
            cumulative: nameToMetric[1].cumulative || adapter_1.BaseMeasure.isCumulative(nameToMetric[1]),
            type: 'number',
            aggType: nameToMetric[1].type,
            drillMembers: drillMembersArray,
            drillMembersGrouped: {
                measures: drillMembersArray.filter((member) => this.cubeEvaluator.isMeasure(member)),
                dimensions: drillMembersArray.filter((member) => this.cubeEvaluator.isDimension(member)),
            },
            meta: nameToMetric[1].meta
        };
    }
    title(cubeTitle, nameToDef, short) {
        // eslint-disable-next-line prefer-template
        return `${short ? '' : cubeTitle + ' '}${nameToDef[1].title || this.titleize(nameToDef[0])}`;
    }
    titleize(name) {
        return inflection_1.default.titleize(inflection_1.default.underscore(camelcase_1.default(name, { pascalCase: true })));
    }
}
exports.CubeToMetaTransformer = CubeToMetaTransformer;
//# sourceMappingURL=CubeToMetaTransformer.js.map
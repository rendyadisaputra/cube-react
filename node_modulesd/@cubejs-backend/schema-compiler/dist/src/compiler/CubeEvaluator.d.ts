export class CubeEvaluator extends CubeSymbols {
    constructor(cubeValidator: any);
    cubeValidator: any;
    evaluatedCubes: {};
    primaryKeys: {};
    byFileName: Record<any, any[]> | undefined;
    /**
     * @protected
     */
    protected prepareCube(cube: any, errorReporter: any): void;
    cubesByFileName(fileName: any): any[];
    timeDimensionPathsForCube(cube: any): string[];
    measuresForCube(cube: any): any;
    preAggregationsForCube(path: any): any;
    preAggregations(filter: any): {
        id: string;
        preAggregationName: string;
        preAggregation: any;
        cube: string;
        references: {
            dimensions: any;
            measures: any;
            timeDimensions: {
                dimension: any;
                granularity: any;
            }[];
            rollups: any;
        };
        refreshKey: any;
        indexesReferences: any;
    }[];
    scheduledPreAggregations(): {
        id: string;
        preAggregationName: string;
        preAggregation: any;
        cube: string;
        references: {
            dimensions: any;
            measures: any;
            timeDimensions: {
                dimension: any;
                granularity: any;
            }[];
            rollups: any;
        };
        refreshKey: any;
        indexesReferences: any;
    }[];
    cubeNames(): string[];
    isMeasure(measurePath: any): any;
    isDimension(path: any): any;
    isSegment(path: any): any;
    measureByPath(measurePath: any): any;
    dimensionByPath(dimensionPath: any): any;
    segmentByPath(segmentPath: any): any;
    cubeExists(cube: any): boolean;
    cubeFromPath(path: any): any;
    cubeNameFromPath(path: any): any;
    pathFromArray(array: any): any;
    isInstanceOfType(type: any, path: any): any;
    byPath(type: any, path: any): any;
    parsePath(type: any, path: any): any;
    evaluateReferences(cube: any, referencesFn: any, options?: {}): any;
    evaluatePreAggregationReferences(cube: any, aggregation: any): {
        dimensions: any;
        measures: any;
        timeDimensions: {
            dimension: any;
            granularity: any;
        }[];
        rollups: any;
    };
}
import { CubeSymbols } from "./CubeSymbols";
//# sourceMappingURL=CubeEvaluator.d.ts.map
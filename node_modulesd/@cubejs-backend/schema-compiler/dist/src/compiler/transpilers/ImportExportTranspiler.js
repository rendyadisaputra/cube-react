"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportExportTranspiler = void 0;
const t = __importStar(require("@babel/types"));
class ImportExportTranspiler {
    traverseObject(reporter) {
        return {
            ImportDeclaration(path) {
                const specifiers = path.get('specifiers');
                // eslint-disable-next-line array-callback-return,consistent-return
                const declarations = specifiers.map(specifier => {
                    if (specifier.node.type === 'ImportSpecifier') {
                        return t.variableDeclarator(specifier.get('local').node, t.memberExpression(t.callExpression(t.identifier('require'), [path.get('source').node]), 
                        // @todo fix without any
                        specifier.get('imported').node));
                    }
                    else if (specifier.node.type === 'ImportDefaultSpecifier') {
                        return t.variableDeclarator(specifier.get('local').node, t.callExpression(t.identifier('require'), [path.get('source').node]));
                    }
                    else {
                        reporter.syntaxError({
                            message: `'${specifier.node.type}' import not supported`,
                            loc: specifier.node.loc,
                        });
                    }
                });
                path.replaceWith(t.variableDeclaration('const', declarations));
            },
            ExportNamedDeclaration(path) {
                const specifiers = path.get('specifiers');
                // eslint-disable-next-line array-callback-return,consistent-return
                const declarations = specifiers.map(specifier => {
                    if (specifier.node.type === 'ExportSpecifier') {
                        return t.objectProperty(specifier.get('exported').node, 
                        // @todo fix without any
                        specifier.get('local').node);
                    }
                    else {
                        reporter.syntaxError({
                            message: `'${specifier.node.type}' export not supported`,
                            loc: specifier.node.loc,
                        });
                    }
                });
                const addExportCall = t.callExpression(t.identifier('addExport'), [t.objectExpression(declarations)]);
                if (path.get('declaration')) {
                    path.replaceWithMultiple([
                        // @todo fix without any
                        path.get('declaration').node,
                        t.callExpression(t.identifier('addExport'), [
                            t.objectExpression(
                            // @ts-ignore
                            path.get('declaration').get('declarations').map(d => t.objectProperty(d.get('id').node, d.get('id').node)))
                        ])
                    ]);
                }
                else {
                    path.replaceWith(addExportCall);
                }
            },
            ExportDefaultDeclaration(path) {
                // @ts-ignore
                path.replaceWith(t.callExpression(t.identifier('setExport'), [path.get('declaration').node]));
            }
        };
    }
}
exports.ImportExportTranspiler = ImportExportTranspiler;
//# sourceMappingURL=ImportExportTranspiler.js.map
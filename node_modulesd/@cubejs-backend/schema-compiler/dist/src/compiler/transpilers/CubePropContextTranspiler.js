"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubePropContextTranspiler = void 0;
const t = __importStar(require("@babel/types"));
const ramda_1 = __importDefault(require("ramda"));
/* this list was generated by getTransformPatterns() */
const transpiledFieldsPatterns = [
    /\.sql$/,
    /sql$/,
    /^measures\.[_a-zA-Z][_a-zA-Z0-9]*\.(drillMemberReferences|drillMembers)$/,
    /^preAggregations\.[_a-zA-Z][_a-zA-Z0-9]*\.indexes\.[_a-zA-Z][_a-zA-Z0-9]*\.columns$/,
    /^preAggregations\.[_a-zA-Z][_a-zA-Z0-9]*\.(timeDimensionReference|timeDimension|segments|dimensions|measures|rollups|segmentReferences|dimensionReferences|measureReferences|rollupReferences)$/,
    /^contextMembers$/,
];
const transpiledFields = new Set();
transpiledFieldsPatterns === null || transpiledFieldsPatterns === void 0 ? void 0 : transpiledFieldsPatterns.forEach((r) => {
    const fields = r.toString().replace(/.*?([_a-zA-Z|][_a-zA-Z0-9|]*)([^_a-zA-Z0-9|]*)$/, '$1').split('|');
    fields.forEach((f) => transpiledFields.add(f));
});
class CubePropContextTranspiler {
    constructor(cubeSymbols, cubeDictionary) {
        this.cubeSymbols = cubeSymbols;
        this.cubeDictionary = cubeDictionary;
    }
    traverseObject() {
        return {
            CallExpression: (path) => {
                if (t.isIdentifier(path.node.callee)) {
                    const args = path.get('arguments');
                    if (path.node.callee.name === 'cube') {
                        if (args === null || args === void 0 ? void 0 : args[args.length - 1]) {
                            const cubeName = args[0].node.type === 'StringLiteral' && args[0].node.value ||
                                args[0].node.type === 'TemplateLiteral' &&
                                    args[0].node.quasis.length &&
                                    args[0].node.quasis[0].value.cooked;
                            args[args.length - 1].traverse(this.sqlAndReferencesFieldVisitor(cubeName));
                            args[args.length - 1].traverse(this.knownIdentifiersInjectVisitor('extends', name => this.cubeDictionary.resolveCube(name)));
                        }
                    }
                    else if (path.node.callee.name === 'context') {
                        args[args.length - 1].traverse(this.sqlAndReferencesFieldVisitor(null));
                    }
                }
            }
        };
    }
    transformObjectProperty(path, resolveSymbol) {
        const knownIds = this.collectKnownIdentifiers(resolveSymbol, path.get('value'));
        path.get('value').replaceWith(t.arrowFunctionExpression(knownIds.map(i => t.identifier(i)), 
        // @todo Replace any with assert expression
        path.node.value, false));
    }
    sqlAndReferencesFieldVisitor(cubeName) {
        const resolveSymbol = n => this.cubeSymbols.resolveSymbol(cubeName, n) || this.cubeSymbols.isCurrentCube(n);
        return {
            ObjectProperty: (path) => {
                if (path.node.key.type === 'Identifier' && transpiledFields.has(path.node.key.name)) {
                    const fullPath = this.fullPath(path);
                    // eslint-disable-next-line no-restricted-syntax
                    for (const p of transpiledFieldsPatterns) {
                        if (fullPath.match(p)) {
                            this.transformObjectProperty(path, resolveSymbol);
                            return;
                        }
                    }
                }
            }
        };
    }
    fullPath(path) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        // @ts-ignore
        let fp = ((_b = (_a = path === null || path === void 0 ? void 0 : path.node) === null || _a === void 0 ? void 0 : _a.key) === null || _b === void 0 ? void 0 : _b.name) || '';
        let pp = path === null || path === void 0 ? void 0 : path.parentPath;
        while (pp) {
            if (((_d = (_c = pp === null || pp === void 0 ? void 0 : pp.parentPath) === null || _c === void 0 ? void 0 : _c.node) === null || _d === void 0 ? void 0 : _d.type) === 'ArrayExpression') {
                fp = `0.${fp}`;
                pp = pp === null || pp === void 0 ? void 0 : pp.parentPath;
                // @ts-ignore
            }
            else if (((_g = (_f = (_e = pp === null || pp === void 0 ? void 0 : pp.parentPath) === null || _e === void 0 ? void 0 : _e.node) === null || _f === void 0 ? void 0 : _f.key) === null || _g === void 0 ? void 0 : _g.type) === 'Identifier') {
                // @ts-ignore
                fp = `${((_k = (_j = (_h = pp === null || pp === void 0 ? void 0 : pp.parentPath) === null || _h === void 0 ? void 0 : _h.node) === null || _j === void 0 ? void 0 : _j.key) === null || _k === void 0 ? void 0 : _k.name) || '0'}.${fp}`;
                pp = (_l = pp === null || pp === void 0 ? void 0 : pp.parentPath) === null || _l === void 0 ? void 0 : _l.parentPath;
            }
            else
                break;
        }
        return fp;
    }
    knownIdentifiersInjectVisitor(field, resolveSymbol) {
        return {
            ObjectProperty: (path) => {
                if (path.node.key.type === 'Identifier' && path.node.key.name.match(field)) {
                    this.transformObjectProperty(path, resolveSymbol);
                }
            }
        };
    }
    collectKnownIdentifiers(resolveSymbol, path) {
        const identifiers = [];
        if (path.node.type === 'Identifier') {
            this.matchAndPushIdentifier(path, resolveSymbol, identifiers);
        }
        path.traverse({
            Identifier: (p) => {
                this.matchAndPushIdentifier(p, resolveSymbol, identifiers);
            }
        });
        return ramda_1.default.uniq(identifiers);
    }
    matchAndPushIdentifier(path, resolveSymbol, identifiers) {
        if ((!path.parent ||
            (path.parent.type !== 'MemberExpression' || path.parent.type === 'MemberExpression' && path.key !== 'property')) &&
            resolveSymbol(path.node.name)) {
            identifiers.push(path.node.name);
        }
    }
}
exports.CubePropContextTranspiler = CubePropContextTranspiler;
//# sourceMappingURL=CubePropContextTranspiler.js.map
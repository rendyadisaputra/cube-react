import * as t from '@babel/types';
import { NodePath } from '@babel/traverse';
import { TranspilerInterface, TraverseObject } from './transpiler.interface';
import type { CubeSymbols } from '../CubeSymbols';
import type { CubeDictionary } from '../CubeDictionary';
export declare class CubePropContextTranspiler implements TranspilerInterface {
    protected readonly cubeSymbols: CubeSymbols;
    protected readonly cubeDictionary: CubeDictionary;
    constructor(cubeSymbols: CubeSymbols, cubeDictionary: CubeDictionary);
    traverseObject(): TraverseObject;
    protected transformObjectProperty(path: NodePath<t.ObjectProperty>, resolveSymbol: (name: string) => void): void;
    protected sqlAndReferencesFieldVisitor(cubeName: any): TraverseObject;
    protected fullPath(path: NodePath<t.ObjectProperty>): string;
    protected knownIdentifiersInjectVisitor(field: RegExp | string, resolveSymbol: (name: string) => void): TraverseObject;
    protected collectKnownIdentifiers(resolveSymbol: any, path: NodePath): never[];
    protected matchAndPushIdentifier(path: any, resolveSymbol: any, identifiers: any): void;
}
//# sourceMappingURL=CubePropContextTranspiler.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaffoldingSchema = void 0;
const inflection_1 = __importDefault(require("inflection"));
const ramda_1 = __importDefault(require("ramda"));
const UserError_1 = require("../compiler/UserError");
const MEASURE_DICTIONARY = [
    'amount',
    'price',
    'count',
    'balance',
    'total',
    'number',
    'cost',
    'qty',
    'quantity',
    'duration',
    'value'
];
const DRILL_MEMBERS_DICTIONARY = [
    'id',
    'name',
    'title',
    'firstname',
    'first_name',
    'lastname',
    'last_name',
    'createdat',
    'created_at',
    'created',
    'timestamp',
    'city',
    'country',
    'date'
];
const idRegex = '_id$|id$';
class ScaffoldingSchema {
    constructor(dbSchema) {
        this.dbSchema = dbSchema;
    }
    generateForTables(tableNames) {
        this.prepareTableNamesToTables(tableNames);
        return tableNames.map(tableName => this.tableSchema(tableName, true));
    }
    prepareTableNamesToTables(tableNames) {
        this.tableNamesToTables = ramda_1.default.pipe(ramda_1.default.unnest, ramda_1.default.groupBy(n => n[0]), ramda_1.default.map(groupedNameToDef => groupedNameToDef.map(nameToDef => nameToDef[1])))(tableNames.map(tableName => {
            const [schema, table] = this.parseTableName(tableName);
            const tableDefinition = this.resolveTableDefinition(tableName);
            const definition = {
                schema, table, tableDefinition, tableName
            };
            const tableizeName = inflection_1.default.tableize(table);
            const parts = tableizeName.split('_');
            const tableNamesFromParts = ramda_1.default.range(0, parts.length - 1).map(toDrop => inflection_1.default.tableize(ramda_1.default.drop(toDrop, parts).join('_')));
            const names = ramda_1.default.uniq([table, tableizeName].concat(tableNamesFromParts));
            return names.map(n => [n, definition]);
        }));
    }
    resolveTableDefinition(tableName) {
        const [schema, table] = this.parseTableName(tableName);
        if (!this.dbSchema[schema]) {
            throw new UserError_1.UserError(`Can't resolve ${tableName}: '${schema}' does not exist`);
        }
        if (!this.dbSchema[schema][table]) {
            throw new UserError_1.UserError(`Can't resolve ${tableName}: '${table}' does not exist`);
        }
        return this.dbSchema[schema][table];
    }
    tableSchema(tableName, includeJoins) {
        const [schema, table] = this.parseTableName(tableName);
        const tableDefinition = this.resolveTableDefinition(tableName);
        const dimensions = this.dimensions(tableDefinition);
        return {
            cube: inflection_1.default.camelize(table),
            tableName,
            schema,
            table,
            measures: this.numberMeasures(tableDefinition),
            dimensions,
            drillMembers: this.drillMembers(dimensions),
            joins: includeJoins ? this.joins(tableName, tableDefinition) : []
        };
    }
    parseTableName(tableName) {
        let schemaAndTable;
        if (Array.isArray(tableName)) {
            schemaAndTable = tableName;
        }
        else {
            schemaAndTable = tableName.match(/(["`].*?["`]|[^`".]+)+(?=\s*|\s*$)/g);
        }
        if (schemaAndTable.length !== 2) {
            throw new UserError_1.UserError(`Incorrect format for '${tableName}'. Should be in '<schema>.<table>' format`);
        }
        return schemaAndTable;
    }
    dimensions(tableDefinition) {
        return this.dimensionColumns(tableDefinition).map(column => {
            const res = {
                name: column.name,
                types: [column.columnType || this.columnType(column)],
                title: inflection_1.default.titleize(column.name)
            };
            if (column.columnType !== 'time') {
                res.isPrimaryKey = column.attributes && column.attributes.indexOf('primaryKey') !== -1 ||
                    column.name.toLowerCase() === 'id';
            }
            return res;
        });
    }
    numberMeasures(tableDefinition) {
        return tableDefinition.filter(column => !column.name.startsWith('_') &&
            (this.columnType(column) === 'number') &&
            this.fromMeasureDictionary(column)).map(column => ({
            name: column.name,
            types: ['sum', 'avg', 'min', 'max'],
            title: inflection_1.default.titleize(column.name)
        }));
    }
    fromMeasureDictionary(column) {
        return !column.name.match(new RegExp(idRegex, 'i')) && !!MEASURE_DICTIONARY.find(word => column.name.toLowerCase().endsWith(word));
    }
    dimensionColumns(tableDefinition) {
        const dimensionColumns = tableDefinition.filter(column => !column.name.startsWith('_') && this.columnType(column) === 'string' ||
            column.attributes && column.attributes.indexOf('primaryKey') !== -1 ||
            column.name.toLowerCase() === 'id');
        const timeColumns = ramda_1.default.pipe(ramda_1.default.filter(column => !column.name.startsWith('_') && this.columnType(column) === 'time'), ramda_1.default.sortBy(column => this.timeColumnIndex(column)), ramda_1.default.map(column => ({ ...column, columnType: 'time' })) // TODO do we need it?
        )(tableDefinition);
        return dimensionColumns.concat(timeColumns);
    }
    joins(tableName, tableDefinition) {
        return ramda_1.default.unnest(tableDefinition
            .filter(column => (column.name.match(new RegExp(idRegex, 'i')) && column.name.toLowerCase() !== 'id'))
            .map(column => {
            const withoutId = column.name.replace(new RegExp(idRegex, 'i'), '');
            const tablesToJoin = this.tableNamesToTables[withoutId] ||
                this.tableNamesToTables[inflection_1.default.tableize(withoutId)];
            if (!tablesToJoin) {
                return null;
            }
            const columnsToJoin = tablesToJoin.map(definition => {
                if (tableName === definition.tableName) {
                    return null;
                }
                let columnForJoin = definition.tableDefinition.find(c => c.name.toLowerCase() === column.name.toLowerCase());
                columnForJoin = columnForJoin || definition.tableDefinition.find(c => c.name.toLowerCase() === 'id');
                if (!columnForJoin) {
                    return null;
                }
                return {
                    cubeToJoin: inflection_1.default.camelize(definition.table),
                    columnToJoin: columnForJoin.name,
                    tableName: definition.tableName
                };
            }).filter(ramda_1.default.identity);
            return columnsToJoin.map(columnToJoin => ({
                thisTableColumn: column.name,
                tableName: columnToJoin.tableName,
                cubeToJoin: columnToJoin.cubeToJoin,
                columnToJoin: columnToJoin.columnToJoin,
                relationship: 'belongsTo'
            }));
        })
            .filter(ramda_1.default.identity));
    }
    drillMembers(dimensions) {
        return dimensions.filter(d => this.fromDrillMembersDictionary(d));
    }
    fromDrillMembersDictionary(dimension) {
        return !!DRILL_MEMBERS_DICTIONARY.find(word => dimension.name.toLowerCase().indexOf(word) !== -1);
    }
    timeColumnIndex(column) {
        const name = column.name.toLowerCase();
        if (name.indexOf('create') !== -1) {
            return 0;
        }
        else if (name.indexOf('update') !== -1) {
            return 1;
        }
        else {
            return 2;
        }
    }
    columnType(column) {
        const type = column.type.toLowerCase();
        if (['time', 'date'].find(t => type.indexOf(t) !== -1)) {
            return 'time';
        }
        else if (['int', 'dec', 'double', 'num'].find(t => type.indexOf(t) !== -1)) {
            return 'number';
        }
        else {
            return 'string';
        }
    }
}
exports.ScaffoldingSchema = ScaffoldingSchema;
//# sourceMappingURL=ScaffoldingSchema.js.map
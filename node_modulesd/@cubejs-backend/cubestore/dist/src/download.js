"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadBinaryFromRelease = exports.getBinaryPath = exports.getCubeStorePath = void 0;
/* eslint-disable no-restricted-syntax */
const shared_1 = require("@cubejs-backend/shared");
const process_1 = __importDefault(require("process"));
const core_1 = require("@octokit/core");
const path = __importStar(require("path"));
const utils_1 = require("./utils");
function getCubeStorePath() {
    return path.join(path.resolve(__dirname, '..', '..'), 'downloaded', 'latest');
}
exports.getCubeStorePath = getCubeStorePath;
function getBinaryPath() {
    const binaryName = process_1.default.platform === 'win32' ? 'cubestored.exe' : 'cubestored';
    return path.join(getCubeStorePath(), 'bin', binaryName);
}
exports.getBinaryPath = getBinaryPath;
async function fetchRelease(version) {
    const client = new core_1.Octokit({
        request: {
            agent: await shared_1.getHttpAgentForProxySettings(),
        }
    });
    const { data } = await client.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', {
        owner: 'cube-js',
        repo: 'cube.js',
        tag: `v${version}`
    });
    return data;
}
function parseInfoFromAssetName(assetName) {
    if (assetName.startsWith('cubestored-')) {
        const fileName = assetName.slice('cubestored-'.length);
        const targetAndType = fileName.slice(0, fileName.indexOf('.'));
        const format = fileName.slice(fileName.indexOf('.') + 1);
        if (targetAndType.endsWith('-shared')) {
            return {
                target: targetAndType.substr(0, targetAndType.length - '-shared'.length),
                format,
                type: 'shared'
            };
        }
        return {
            target: targetAndType,
            format,
            type: 'static'
        };
    }
    return null;
}
async function downloadBinaryFromRelease() {
    // eslint-disable-next-line global-require
    const { version } = require('../../package.json');
    const release = await fetchRelease(version);
    if (release) {
        if (release.assets.length === 0) {
            throw new Error(`There are no artifacts for Cube Store v${version}. Most probably it is still building. Please try again later.`);
        }
        const currentTarget = utils_1.getTarget();
        for (const asset of release.assets) {
            const assetInfo = parseInfoFromAssetName(asset.name);
            if (assetInfo && assetInfo.target === currentTarget
                && assetInfo.type === 'static' && assetInfo.format === 'tar.gz') {
                const cubestorePath = getCubeStorePath();
                return shared_1.downloadAndExtractFile(asset.browser_download_url, {
                    cwd: cubestorePath,
                    showProgress: true,
                });
            }
        }
        throw new Error(`Cube Store v${version} Artifact for ${process_1.default.platform} is not found. Most probably it is still building. Please try again later.`);
    }
    throw new Error(`Unable to find Cube Store release v${version}. Most probably it was removed.`);
}
exports.downloadBinaryFromRelease = downloadBinaryFromRelease;
//# sourceMappingURL=download.js.map
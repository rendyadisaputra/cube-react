"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCubeStoreSupported = exports.getTarget = exports.detectLibc = void 0;
const child_process_1 = require("child_process");
const process_1 = __importDefault(require("process"));
const shared_1 = require("@cubejs-backend/shared");
function detectLibc() {
    if (process_1.default.platform !== 'linux') {
        throw new Error('Unable to detect libc on not linux os');
    }
    try {
        const { status } = child_process_1.spawnSync('getconf', ['GNU_LIBC_VERSION'], {
            encoding: 'utf8',
            // Using pipe to protect unexpect STDERR output
            stdio: 'pipe'
        });
        if (status === 0) {
            return 'gnu';
        }
    }
    catch (e) {
        shared_1.internalExceptions(e);
    }
    {
        const { status, stdout, stderr } = child_process_1.spawnSync('ldd', ['--version'], {
            encoding: 'utf8',
            // Using pipe to protect unexpect STDERR output
            stdio: 'pipe',
        });
        if (status === 0) {
            if (stdout.includes('musl')) {
                return 'musl';
            }
            if (stdout.includes('gnu')) {
                return 'gnu';
            }
        }
        else {
            if (stderr.includes('musl')) {
                return 'musl';
            }
            if (stderr.includes('gnu')) {
                return 'gnu';
            }
        }
    }
    shared_1.displayCLIWarning('Unable to detect what host library is used as libc, continue with gnu');
    return 'gnu';
}
exports.detectLibc = detectLibc;
function getTarget() {
    if (process_1.default.arch === 'x64') {
        switch (process_1.default.platform) {
            case 'win32':
                return 'x86_64-pc-windows-msvc';
            case 'linux':
                return `x86_64-unknown-linux-${detectLibc()}`;
            case 'darwin':
                return 'x86_64-apple-darwin';
            default:
                throw new Error(`You are using ${process_1.default.env} platform which is not supported by Cube Store`);
        }
    }
    if (process_1.default.arch === 'arm64' && process_1.default.platform === 'darwin') {
        // Rosetta 2 is required
        return 'x86_64-apple-darwin';
    }
    throw new Error(`You are using ${process_1.default.arch} architecture on ${process_1.default.platform} platform which is not supported by Cube Store`);
}
exports.getTarget = getTarget;
function isCubeStoreSupported() {
    if (process_1.default.arch === 'x64') {
        return ['win32', 'darwin', 'linux'].includes(process_1.default.platform);
    }
    return process_1.default.arch === 'arm64' && process_1.default.platform === 'darwin';
}
exports.isCubeStoreSupported = isCubeStoreSupported;
//# sourceMappingURL=utils.js.map
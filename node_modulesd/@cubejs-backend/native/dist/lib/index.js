"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerInterface = exports.setLogLevel = exports.isSupported = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function loadNative() {
    // Development version
    if (fs_1.default.existsSync(path_1.default.join(__dirname, '/../../index.node'))) {
        return require(path_1.default.join(__dirname, '/../../index.node'));
    }
    if (fs_1.default.existsSync(path_1.default.join(__dirname, '/../../native/index.node'))) {
        return require(path_1.default.join(__dirname, '/../../native/index.node'));
    }
    throw new Error('Unable to load @cubejs-backend/native, probably your system is not supported.');
}
function isSupported() {
    return fs_1.default.existsSync(path_1.default.join(__dirname, '/../../index.node')) || fs_1.default.existsSync(path_1.default.join(__dirname, '/../../native/index.node'));
}
exports.isSupported = isSupported;
function wrapNativeFunctionWithChannelCallback(fn) {
    const native = loadNative();
    return async (extra, channel) => {
        try {
            const result = await fn(JSON.parse(extra));
            native.channel_resolve(channel, JSON.stringify(result));
        }
        catch (e) {
            native.channel_reject(channel);
            throw e;
        }
    };
}
;
const setLogLevel = (level) => {
    const native = loadNative();
    native.setLogLevel(level);
};
exports.setLogLevel = setLogLevel;
const registerInterface = async (options) => {
    if (typeof options !== 'object' && options == null) {
        throw new Error('Argument options must be an object');
    }
    if (typeof options.checkAuth != 'function') {
        throw new Error('options.checkAuth must be a function');
    }
    if (typeof options.load != 'function') {
        throw new Error('options.load must be a function');
    }
    if (typeof options.meta != 'function') {
        throw new Error('options.meta must be a function');
    }
    const native = loadNative();
    return native.registerInterface({
        ...options,
        checkAuth: wrapNativeFunctionWithChannelCallback(options.checkAuth),
        load: wrapNativeFunctionWithChannelCallback(options.load),
        meta: wrapNativeFunctionWithChannelCallback(options.meta),
    });
};
exports.registerInterface = registerInterface;
//# sourceMappingURL=index.js.map
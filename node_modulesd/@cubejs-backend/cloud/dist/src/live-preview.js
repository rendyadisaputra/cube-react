"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LivePreviewWatcher = void 0;
const chokidar_1 = __importDefault(require("chokidar"));
const shared_1 = require("@cubejs-backend/shared");
const cloud_1 = require("./cloud");
const deploy_1 = require("./deploy");
class LivePreviewWatcher {
    constructor() {
        this.watcher = null;
        this.handleQueueTimeout = null;
        this.cubeCloudClient = new cloud_1.CubeCloudClient();
        this.auth = null;
        this.queue = [];
        this.uploading = false;
    }
    log(message) {
        console.log('☁️  Live-preview:', message);
    }
    setAuth(token) {
        try {
            const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
            this.auth = {
                auth: token,
                deploymentId: payload.deploymentId,
                url: payload.url,
            };
            return this.auth;
        }
        catch (e) {
            shared_1.internalExceptions(e);
            throw new Error('Live-preview token is invalid');
        }
    }
    startWatch() {
        if (!this.auth) {
            throw new Error('Auth isn\'t set');
        }
        if (!this.watcher) {
            this.log('Start with Cube Cloud');
            this.watcher = chokidar_1.default.watch(process.cwd(), {
                ignoreInitial: false,
                ignored: [
                    '**/node_modules/**',
                    '**/.*'
                ]
            });
            let preSaveTimeout;
            this.watcher.on('all', ( /* event, p */) => {
                if (preSaveTimeout)
                    clearTimeout(preSaveTimeout);
                preSaveTimeout = setTimeout(() => {
                    this.queue.push({ time: new Date() });
                }, 1000);
            });
            this.handleQueue();
        }
    }
    stopWatch(message) {
        if (this.watcher) {
            this.watcher.close();
            this.watcher = null;
        }
        if (this.handleQueueTimeout)
            clearTimeout(this.handleQueueTimeout);
        this.log(`stop wathcer, ${message}`);
    }
    async getStatus() {
        const { auth } = this;
        let result = {
            lastHashTarget: this.lastHash,
            uploading: this.uploading,
            active: Boolean(this.watcher),
        };
        if (auth) {
            result = {
                ...result,
                ...(await this.cubeCloudClient.getStatusDevMode({
                    auth,
                    lastHash: this.lastHash
                })),
                deploymentId: auth.deploymentId,
                url: auth.url
            };
        }
        return result;
    }
    async createTokenWithPayload(payload) {
        let token;
        const { auth } = this;
        if (auth) {
            token = await this.cubeCloudClient.createTokenDevMode({ auth, payload });
        }
        return token;
    }
    async handleQueue() {
        try {
            const [job] = this.queue;
            if (job) {
                this.queue = [];
                this.uploading = true;
                await this.deploy();
            }
        }
        catch (e) {
            if (e.response && e.response.statusCode === 302) {
                this.auth = null;
                this.stopWatch('token expired or invalid, please re-run live-preview mode');
            }
            else {
                shared_1.internalExceptions(e);
            }
        }
        finally {
            this.uploading = false;
            this.handleQueueTimeout = setTimeout(async () => this.handleQueue(), 1000);
        }
    }
    async deploy() {
        if (!this.auth)
            throw new Error('Auth isn\'t set');
        this.log('files upload start');
        const { auth } = this;
        const directory = process.cwd();
        const cubeCloudClient = new cloud_1.CubeCloudClient(auth, true);
        const deployController = new deploy_1.DeployController(cubeCloudClient);
        const result = await deployController.deploy(directory);
        if (result && result.lastHash)
            this.lastHash = result.lastHash;
        this.log('files upload end, success');
        return result;
    }
}
exports.LivePreviewWatcher = LivePreviewWatcher;
//# sourceMappingURL=live-preview.js.map
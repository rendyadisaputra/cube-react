"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubeCloudClient = void 0;
const request_promise_1 = __importDefault(require("request-promise"));
const path_1 = __importDefault(require("path"));
class CubeCloudClient {
    constructor(auth, livePreview) {
        this.auth = auth;
        this.livePreview = livePreview;
    }
    async request(options) {
        const { url, auth, ...restOptions } = options;
        const authorization = auth || this.auth;
        if (!authorization) {
            throw new Error('Auth isn\'t set');
        }
        return request_promise_1.default({
            headers: {
                authorization: authorization.auth
            },
            ...restOptions,
            url: `${authorization.url}/${url(authorization.deploymentId || '')}`,
            json: true
        });
    }
    getDeploymentsList({ auth } = {}) {
        return this.request({
            url: () => 'build/deploy/deployments',
            method: 'GET',
            auth
        });
    }
    async getDeploymentToken(authToken) {
        const res = await request_promise_1.default({
            url: `${process.env.CUBE_CLOUD_HOST || 'https://cubecloud.dev'}/v1/token`,
            method: 'POST',
            headers: {
                'Content-type': 'application/json'
            },
            json: true,
            body: {
                token: authToken
            }
        });
        if (res && res.error) {
            throw res.error;
        }
        return res.jwt;
    }
    extendRequestByLivePreview() {
        return this.livePreview ? { qs: { live: 'true' } } : {};
    }
    getUpstreamHashes({ auth } = {}) {
        return this.request({
            url: (deploymentId) => `build/deploy/${deploymentId}/files`,
            method: 'GET',
            auth,
            ...this.extendRequestByLivePreview()
        });
    }
    startUpload({ auth } = {}) {
        return this.request({
            url: (deploymentId) => `build/deploy/${deploymentId}/start-upload`,
            method: 'POST',
            auth,
            ...this.extendRequestByLivePreview()
        });
    }
    uploadFile({ transaction, fileName, data, auth }) {
        return this.request({
            url: (deploymentId) => `build/deploy/${deploymentId}/upload-file`,
            method: 'POST',
            formData: {
                transaction: JSON.stringify(transaction),
                fileName,
                file: {
                    value: data,
                    options: {
                        filename: path_1.default.basename(fileName),
                        contentType: 'application/octet-stream'
                    }
                }
            },
            auth,
            ...this.extendRequestByLivePreview()
        });
    }
    finishUpload({ transaction, files, auth }) {
        return this.request({
            url: (deploymentId) => `build/deploy/${deploymentId}/finish-upload`,
            method: 'POST',
            body: {
                transaction,
                files
            },
            auth,
            ...this.extendRequestByLivePreview()
        });
    }
    setEnvVars({ envVariables, auth }) {
        return this.request({
            url: (deploymentId) => `build/deploy/${deploymentId}/set-env`,
            method: 'POST',
            body: {
                envVariables: JSON.stringify(envVariables),
            },
            auth
        });
    }
    getStatusDevMode({ auth, lastHash } = {}) {
        return this.request({
            url: (deploymentId) => `devmode/${deploymentId}/status`,
            qs: { lastHash },
            method: 'GET',
            auth
        });
    }
    createTokenDevMode({ auth, payload } = {}) {
        return this.request({
            url: (deploymentId) => `devmode/${deploymentId}/token`,
            method: 'POST',
            body: payload,
            auth
        });
    }
}
exports.CubeCloudClient = CubeCloudClient;
//# sourceMappingURL=cloud.js.map
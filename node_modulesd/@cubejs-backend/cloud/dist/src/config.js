"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const dotenv_1 = __importDefault(require("@cubejs-backend/dotenv"));
const shared_1 = require("@cubejs-backend/shared");
const cloud_1 = require("./cloud");
class Config {
    constructor(options = {}) {
        this.directory = process.cwd();
        this.home = os_1.default.homedir();
        this.cubeCloudClient = new cloud_1.CubeCloudClient();
        this.directory = options.directory || this.directory;
        this.home = options.home || this.home;
    }
    async envFile(envFile) {
        if (await fs_extra_1.default.pathExists(envFile)) {
            const env = dotenv_1.default.config({ path: envFile, multiline: 'line-breaks' }).parsed;
            if (env) {
                if ('CUBEJS_DEV_MODE' in env) {
                    delete env.CUBEJS_DEV_MODE;
                }
                const resolvePossibleFiles = [
                    'CUBEJS_DB_SSL_CA',
                    'CUBEJS_DB_SSL_CERT',
                    'CUBEJS_DB_SSL_KEY',
                ];
                // eslint-disable-next-line no-restricted-syntax
                for (const [key, value] of Object.entries(env)) {
                    if (resolvePossibleFiles.includes(key) && shared_1.isFilePath(value)) {
                        if (fs_extra_1.default.existsSync(value)) {
                            env[key] = fs_extra_1.default.readFileSync(value, 'ascii');
                        }
                        else {
                            console.warn(`Unable to resolve file "${value}" from ${key}`);
                            env[key] = '';
                        }
                    }
                }
                return env;
            }
        }
        return {};
    }
    async addAuthToken(authToken, config) {
        if (!config) {
            config = await this.loadConfig();
        }
        const payload = jsonwebtoken_1.default.decode(authToken);
        if (payload && typeof payload === 'object' && payload.url) {
            config.auth = config.auth || {};
            config.auth[payload.url] = {
                auth: authToken
            };
            if (payload.deploymentId) {
                const dotCubeCloud = await this.loadDotCubeCloud();
                dotCubeCloud.url = payload.url;
                dotCubeCloud.deploymentId = payload.deploymentId;
                await this.writeDotCubeCloud(dotCubeCloud);
            }
            await this.writeConfig(config);
            return config;
        }
        const answer = await this.cubeCloudClient.getDeploymentToken(authToken);
        if (answer) {
            return this.addAuthToken(answer, config);
        }
        // eslint-disable-next-line no-throw-literal
        throw 'Malformed Cube Cloud token';
    }
    async loadConfig() {
        const { configFile } = this.configFile();
        if (await fs_extra_1.default.pathExists(configFile)) {
            return fs_extra_1.default.readJson(configFile);
        }
        return {};
    }
    async writeConfig(config) {
        const { cubeCloudConfigPath, configFile } = this.configFile();
        await fs_extra_1.default.mkdirp(cubeCloudConfigPath);
        await fs_extra_1.default.writeJson(configFile, config);
    }
    configFile() {
        const cubeCloudConfigPath = this.cubeCloudConfigPath();
        const configFile = path_1.default.join(cubeCloudConfigPath, 'config.json');
        return { cubeCloudConfigPath, configFile };
    }
    cubeCloudConfigPath() {
        return path_1.default.join(this.home, '.cubecloud');
    }
    dotCubeCloudFile() {
        return path_1.default.join(this.directory, '.cubecloud');
    }
    async loadDotCubeCloud() {
        if (await fs_extra_1.default.pathExists(this.dotCubeCloudFile())) {
            return fs_extra_1.default.readJson(this.dotCubeCloudFile());
        }
        return {};
    }
    async writeDotCubeCloud(config) {
        await fs_extra_1.default.writeJson(this.dotCubeCloudFile(), config);
    }
}
exports.Config = Config;
//# sourceMappingURL=config.js.map
/// <reference types="node" />
import { ReadStream } from 'fs';
export declare type AuthObject = {
    auth: string;
    url?: string;
    deploymentId?: string;
};
export declare class CubeCloudClient {
    protected readonly auth?: AuthObject | undefined;
    protected readonly livePreview?: boolean | undefined;
    constructor(auth?: AuthObject | undefined, livePreview?: boolean | undefined);
    private request;
    getDeploymentsList({ auth }?: {
        auth?: AuthObject;
    }): Promise<any>;
    getDeploymentToken(authToken: string): Promise<any>;
    private extendRequestByLivePreview;
    getUpstreamHashes({ auth }?: {
        auth?: AuthObject;
    }): Promise<any>;
    startUpload({ auth }?: {
        auth?: AuthObject;
    }): Promise<any>;
    uploadFile({ transaction, fileName, data, auth }: {
        transaction: any;
        fileName: string;
        data: ReadStream;
        auth?: AuthObject;
    }): Promise<any>;
    finishUpload({ transaction, files, auth }: {
        transaction: any;
        files: any;
        auth?: AuthObject;
    }): Promise<any>;
    setEnvVars({ envVariables, auth }: {
        envVariables: any;
        auth?: AuthObject;
    }): Promise<any>;
    getStatusDevMode({ auth, lastHash }?: {
        auth?: AuthObject;
        lastHash?: string;
    }): Promise<any>;
    createTokenDevMode({ auth, payload }?: {
        auth?: AuthObject;
        payload?: Record<string, any>;
    }): Promise<any>;
}
//# sourceMappingURL=cloud.d.ts.map